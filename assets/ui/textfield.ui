(gui "gui-textfield"
    (namespace! :textfield)
    (state! ".colour" (110 120 255) (invalidate: (quote (frame-changed?))))
    (state! ".radius" (quote (/ 8.0 (max .width .height))) (invalidate: (quote (frame-changed?))))
    (state! ".outline" 0 (invalidate: (quote (frame-changed?))))
    (state! ".outline-colour" (quote (darken .colour 5)) (invalidate: (quote (frame-changed?))))

    (state! ".align" :left)
    (state! ".wrap" :word)
    (state! ".lines" :multi)
    (state! ".length" :max)
    (state! ".string" "example")
    (state! ".formatter" (quote (text: .string)))

    (state! ".cursor" (length .string))
    (state! ".cursor-colour" (255 110 120) (invalidate: (quote (frame-changed?))))

    (state! ".enter" (quote ((.string! (insert "\n" .string .cursor)) (.cursor! (+ .cursor 1)))))

    (children:
        (gui-rect
            (.colour! (quote (super .colour)))
            (.radius! (quote (super .radius)))
            (.outline! (quote (super .outline)))
            (.outline-colour! (quote (super .outline-colour)))
        )
        (gui-text
            (.string! (quote (super .formatter)))
            (.align! (quote (super .align)))
            (.wrap! (quote (super .wrap)))
            (.lines! (quote (super .lines)))
            (.length! (quote (super .length)))

            (render:
                (if .active
                    (render-rect (flatten (text-cursor-position .text (super .cursor)) 2 10) .cursor-colour)
                )
            )
        )
    )

    (state! ".active" #f)
    (state! ".inside" #f)
    (state! ".dragged" #f)

    (control:
        (on (click: :left .rect)
            (if @press
                ((.active! #f) (.inside! #t) (.dragged! #t))
                ((if .inside (.active! #t)) (.inside! #f) (.dragged! #f))
            )
            ((.active! #f) (.inside! #f) (.dragged! @press))
        )
        (if .active
            (
                (on (key: :grapheme (down: #t)) ((.string! (insert @char .string .cursor)) (.cursor! (+ .cursor 1))))
                (on (key: :direction (down: #t))
                    (cond
                        (if (= @key :left)
                            (cond
                                (if (all? .cursor (= (:cmd) @flags))
                                    (.cursor! (- .cursor (length (get -1 (separate ("\n") (get 0 (chop ((- .cursor 1)) .string)))))))
                                )
                                (if (all? .cursor (= (:alt) @flags))
                                    (.cursor! (- .cursor (max 1 (length (get -1 (separate ("\n" " " "\t" "," "[" "]" "+" "-" "/" "\\" ":") (get 0 (chop ((- .cursor 1)) .string)))))))) ; TODO: add a reverse separate
                                )
                                (.cursor! (max (- .cursor 1) 0))
                            )
                        )
                        (if (= @key :right)
                            (cond
                                (if (all? .cursor (= (:cmd) @flags))
                                    (.cursor! (+ .cursor (length (get 0 (separate ("\n") (get 1 (flatten (chop ((- .cursor 1)) .string) "")))))))
                                )
                                (if (all? .cursor (= (:alt) @flags))
                                    (.cursor! (min (+ .cursor (max 1 (length (get 0 (separate ("\n" " " "\t" "," "[" "]" "+" "-" "/" "\\" ":") (get 1 (flatten (chop ((- .cursor 1)) .string) ""))))))) (length .string))) ; TODO: add a reverse separate
                                )
                                (.cursor! (min (+ .cursor 1) (length .string)))
                            )
                        )
                        (if (= @key :up)
                            (cond
                                (if (all? .cursor (= (:cmd) @flags))
                                    (.cursor! 0)
                                )
                                (.cursor! (max 0 (- .cursor 1 (length (get -1 (separate ("\n") (get 0 (chop ((- .cursor 1)) .string))))))))
                            )
                        )
                        (if (= @key :down)
                            (cond
                                (if (all? .cursor (= (:cmd) @flags))
                                    (.cursor! (length .string))
                                )
                                (.cursor! (min (+ .cursor 1 (length (get 0 (separate ("\n") (get 1 (flatten (chop ((- .cursor 1)) .string) "")))))) (length .string)))
                            )
                        )
                    )
                )
                (on (key: :delete (down: #t))
                    (cond
                        (if (all? .cursor (= (:cmd) @flags))
                            (begin
                                (state! ".prev-length")
                                (.prev-length! (length .string))
                                (.string! (cat (flatten
                                    (drop -1 (separate ("\n") (get 0 (chop ((- .cursor 1)) .string))))
                                    (get -1 (set 0 (chop ((- .cursor 1)) .string) ""))
                                ) "\n"))
                                (.cursor! (- .cursor (- .prev-length (length .string))))
                            )
                        )
                        (if (all? .cursor (= (:alt) @flags))
                            (begin
                                (state! ".word-length")
                                (.word-length! (max 1 (length (get -1 (separate ("\n" " " "\t" "," "[" "]" "+" "-" "/" "\\" ":" "(" ")" "\"") (get 0 (chop ((- .cursor 1)) .string))))))) ; TODO: add a reverse separate and maybe make the separation list configurable
                                (.string! (remove (- .cursor .word-length) .word-length .string))
                                (.cursor! (- .cursor .word-length))
                            )
                        )
                        (if .cursor ((.string! (remove (- .cursor 1) 1 .string)) (.cursor! (- .cursor 1))))
                    )
                )
                (on (key: :enter (down: #t)) (if .cursor .enter))
                (on (drop: .rect) (.string! (insert (cat @drop-files " ") .string .cursor)))
            )
            (
                (on (drop: .rect) ((.string! (cat @drop-files " ")) (.cursor! 0)))
            )
        )
    )
)
