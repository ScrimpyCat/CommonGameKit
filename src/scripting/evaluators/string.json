{
    "functions": [
        {
            "name": "prefix",
            "description": "Checks if the string has the prefix.",
            "examples": ["(prefix \"My\" \"My Test\") ;1", "(prefix \"My\" \"Test\") ;0"],
            "return": { "type": "boolean" },
            "args": [
                [{ "type": "string", "name": "prefix" }, { "type": "string" }]
            ]
        },
        {
            "name": "suffix",
            "description": "Checks if the string has the suffix.",
            "examples": ["(suffix \"Test\" \"My Test\") ;1", "(suffix \"Test\" \"My\") ;0"],
            "return": { "type": "boolean" },
            "args": [
                [{ "type": "string", "name": "suffix" }, { "type": "string" }]
            ]
        },
        {
            "name": "filename",
            "description": "Get the filename from a string path.",
            "examples": ["(filename \"folder/folder/file.txt\") ;\"file.txt\""],
            "return": { "type": "string" },
            "args": [[{ "type": "string", "name": "path" }]]
        },
        {
            "name": "replace",
            "description": "Replace occurrences of string in the string with another string.",
            "examples": ["(replace \" \" \"-\" \"1 2 3 4 5\") ;\"1-2-3-4-5\""],
            "return": { "type": "string" },
            "args": [[{ "type": "string", "name": "occurrence" }, { "type": "string", "name": "replacement" }, { "type": "string" }]]
        },
        {
            "name": "cat",
            "description": "Concatenate the list of strings, optionally inserting the separator between each.",
            "examples": ["(cat (\"hello\" \"world\")) ;\"helloworld\"", "(cat (\"hello\" \"world\") \" \") ;\"hello world\""],
            "return": { "type": "string" },
            "args": [[{ "type": "list", "name": "strings" }, { "type": "string", "optional": true, "name": "separator" }]]
        },
        {
            "name": "length",
            "description": "Get the length of the string.",
            "examples": ["(length \"123\") ;3", "(length \"1234567890abcdef\") ;16"],
            "return": { "type": "integer" },
            "args": [[{ "type": "string" }]]
        },
        {
            "name": "insert",
            "description": "Insert a string into a certain location in another string.",
            "examples": ["(insert \"!\" \"123\" 3) ;\"123!\"", "(insert \":\" \"hello\" 0) ;\":hello\""],
            "return": { "type": "string" },
            "args": [[{ "type": "string", "name": "src" }, { "type": "string", "name": "dst" }, { "type": "integer", "name": "offset" }]]
        },
        {
            "name": "remove",
            "description": "Remove a portion of the string.",
            "examples": ["(remove 0 3 \"123\") ;\"\"", "(remove 1 1 \"123\") ;\"13\""],
            "return": { "type": "string" },
            "args": [[{ "type": "integer", "name": "offset" }, { "type": "integer", "name": "length" }, { "type": "string" }]]
        },
        {
            "name": "format",
            "description": "Format expressions as string.",
            "examples": ["(format :bin 5) ;\"101\"", "(format :hex (1, 2, 3) (precision: 2) (compact: #f) (prefix: \"0x\") (separator: \",\")) ;\"0x01,0x02,0x03\""],
            "return": { "type": "string" },
            "args": [
                [{ "type": "atom", "name": "type" }, { "type": "expression" }],
                [{ "type": "atom", "value": "bin" }, { "type": "expression" }],
                [{ "type": "atom", "value": "dec" }, { "type": "expression" }],
                [{ "type": "atom", "value": "hex" }, { "type": "expression" }],
                [{ "type": "atom", "value": "flt" }, { "type": "expression" }]
            ],
            "options": [
                {
                    "name": "compact",
                    "description": "Whether or not values should be in compact form or not.",
                    "args": [[{ "type": "boolean" }]]
                },
                {
                    "name": "precision",
                    "description": "The precision to be used for the conversion. This is typically the minimum character limit.",
                    "args": [[{ "type": "integer" }]]
                },
                {
                    "name": "separator",
                    "description": "The string to be used to separate the list items.",
                    "args": [[{ "type": "string" }]]
                },
                {
                    "name": "prefix",
                    "description": "The string to be used infront of every converted literal.",
                    "args": [[{ "type": "string" }]]
                },
                {
                    "name": "suffix",
                    "description": "The string to be used at the end of every converted literal.",
                    "args": [[{ "type": "string" }]]
                }
            ]
        }
    ]
}
