{
    "functions": [
        {
            "name": "begin",
            "description": "Defines a sequence of statements with scope. And returns the result from the last statement.",
            "examples": ["(begin\n\t(+ 1 1)\n\t(begin\n\t\t(+ 2 2)\n\t) ;4\n) ;4"],
            "return": { "type": "expression" },
            "args": [
                { "repeat": [{ "type": "expression", "optional": true }] }
            ]
        },
        {
            "name": "if",
            "description": "A conditional branch statement. If the predicate is true (1 or some non-zero value) it will evaluate and return the result of the truth expression, or if the predicate is false (0) it will evaluate and return the result of the false expression.",
            "examples": ["(if 1 \"true\" \"false\") ;\"true\""],
            "return": { "type": "expression" },
            "args": [[
                { "type": "boolean", "name": "predicate" },
                { "type": "expression", "name": "true" },
                { "type": "expression", "name": "false", "optional": true }
            ]]
        },
        {
            "name": "cond",
            "description": "Resolve a series of conditions. Stops on the first condition to evaluate and returns its result.",
            "examples": ["(cond (if (= .x 1) :one) (if (= .x 2) :two) (if #t :other)) ;:other (.x = 3)", "(cond (chop (0) .x) (split (0) .x)) ;((1) (2)) (.x = (1 2))"],
            "return": { "type": "expression" },
            "args": [
                { "repeat": [{ "type": "expression", "optional": true }] }
            ]
        },
        {
            "name": "loop",
            "description": "A loop statement. Iterates through the list, assigning the element to the given state variable, and evaluating the expression.",
            "examples": [
                "(loop \"var\" (1 2) var) ;(1 2)",
                "(loop \"val\" (1 2) (+ val 1)) ;(2 3)"
            ],
            "args": [[
                { "type": "string", "name": "@item" },
                { "type": "list" },
                { "type": "expression" }
            ]]
        },
        {
            "name": "repeat",
            "description": "Repeat the given expression a certain number of times, assigning the iteration index to the given state variable.",
            "examples": [
                "(repeat \"var\" 2 var) ;(0 1)",
                "(repeat \"val\" 2 (+ val 1)) ;(1 2)"
            ],
            "args": [[
                { "type": "string", "name": "@item" },
                { "type": "integer", "name": "times" },
                { "type": "expression" }
            ]]
        },
        {
            "name": "any?",
            "description": "Checks if any of the values are true (equivalent to a short-circuiting logical OR).",
            "examples": [
                "(any? 0 1) ;1",
                "(any? 0 0) ;0"
            ],
            "return": { "type": "integer" },
            "args": [
                { "repeat": [{ "type": "integer" }] }
            ]
        },
        {
            "name": "all?",
            "description": "Checks if all of the values are true (equivalent to a short-circuiting logical AND).",
            "examples": [
                "(all? 0 1) ;0",
                "(all? 1 1) ;1"
            ],
            "return": { "type": "integer" },
            "args": [
                { "repeat": [{ "type": "integer" }] }
            ]
        }
    ]
}
