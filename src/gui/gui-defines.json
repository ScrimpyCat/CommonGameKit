{
    "functions": [
        {
            "name": "percent-width",
            "description": "Get a value relative to the width of the current view. Float's map 0% - 100% with 0.0 - 1.0, while integers use 0 - 100.",
            "examples": ["(percent-width 100) ;500", "(percent-width 50) ;250"],
            "return": { "type": "number" },
            "args": [[{ "type": "number", "name": "percent" }]]
        },
        {
            "name": "percent-height",
            "description": "Get a value relative to the height of the current view. Float's map 0% - 100% with 0.0 - 1.0, while integers use 0 - 100.",
            "examples": ["(percent-height 100) ;500", "(percent-height 50) ;250"],
            "return": { "type": "number" },
            "args": [[{ "type": "number", "name": "percent" }]]
        }
    ],
    "options": [
        {
            "name": "render",
            "description": "Define how the element should be drawn."
        },
        {
            "name": "control",
            "description": "Define how the element should be interacted with.",
            "functions": [
                {
                    "name": "on",
                    "description": "Match an event predicate. If the predicate is true (1 or some non-zero value) it will evaluate and return the result of the truth expression, or if the predicate is false (0) it will evaluate and return the result of the false expression. If the predicate is of a different event then the one being tested, neither expression will be evaluated.",
                    "examples": ["(on (cursor: .rect) :inside :outside) ;:outside"],
                    "args": [[{"type": "expression", "name": "event-predicate" }, { "type": "expression", "name": "true" }, { "type": "expression", "name": "false", "optional": true }]],
                    "inputs": [
                        {
                            "name": "pos",
                            "description": "Holds the cursor position. Created on cursor/scroll/drop/click events.",
                            "return": { "type": "list", "value": [{ "type": "float", "name": "x" }, { "type": "float", "name": "x" }] }
                        },
                        {
                            "name": "pos-x",
                            "description": "Holds the cursor x position. Created on cursor/scroll/drop/click events.",
                            "return": { "type": "float" }
                        },
                        {
                            "name": "pos-y",
                            "description": "Holds the cursor y position. Created on cursor/scroll/drop/click events.",
                            "return": { "type": "float" }
                        },
                        {
                            "name": "press",
                            "description": "Holds state of a button press. Button is down (0) or released (1). Created on click and key events.",
                            "return": { "type": "boolean" }
                        },
                        {
                            "name": "scroll-delta",
                            "description": "Holds the scroll delta. Created on scroll events.",
                            "return": { "type": "list", "value": [{ "type": "float", "name": "x" }, { "type": "float", "name": "x" }] }
                        },
                        {
                            "name": "scroll-delta-x",
                            "description": "Holds the scroll x delta. Created on scroll events.",
                            "return": { "type": "float" }
                        },
                        {
                            "name": "scroll-delta-y",
                            "description": "Holds the scroll y delta. Created on scroll events.",
                            "return": { "type": "float" }
                        },
                        {
                            "name": "drop-files",
                            "description": "Holds the list of files being dropped. Created on drop events.",
                            "return": { "type": "list" }
                        },
                        {
                            "name": "char",
                            "description": "The character of the key.",
                            "return": { "type": "string" }
                        },
                        {
                            "name": "keycode",
                            "description": "The keycode of the key.",
                            "return": { "type": "integer" }
                        },
                        {
                            "name": "key",
                            "description": "The symbolic name for the key.",
                            "return": { "type": "atom" }
                        },
                        {
                            "name": "repeat",
                            "description": "Whether the key event is a repeat or not.",
                            "return": { "type": "boolean" }
                        },
                        {
                            "name": "flags",
                            "description": "The flag modifiers used with the current key event.",
                            "return": { "type": "list" }
                        }
                    ],
                    "options": [
                        {
                            "name": "cursor",
                            "description": "Predicate to match when the cursor is position inside the given rect. The `@pos` (`@pos-x` and `@pos-y`) variable is set to the current cursor's position.",
                            "examples": ["(cursor: (0 0 10 10)) ;1", "(on (cursor: (0 0 10 10)) @pos) ;(2 5)"],
                            "args": [[{ "type": "list", "name": "rect", "value": [{ "type": "number", "name": "x" }, { "type": "number", "name": "y" }, { "type": "number", "name": "width" }, { "type": "number", "name": "height" }] }]]
                        },
                        {
                            "name": "click",
                            "description": "Predicate to match when a click event occurs inside the given rect. Clicks can be specified using combination of `left`, `right`, `middle`, `shift`, `ctrl`, `alt`, `cmd`. The `@press` variable will be set to indicate whether the button is down (0) or released (1). The `@pos` (`@pos-x` and `@pos-y`) variable is set to the current cursor's position.",
                            "examples": ["(click: :alt-left (0 0 10 10)) ;1", "(on (click: :alt-left (0 0 10 10)) @press) ;1"],
                            "args": [
                                [{ "type": "atom", "name": "button" }, { "type": "list", "name": "rect", "value": [{ "type": "number", "name": "x" }, { "type": "number", "name": "y" }, { "type": "number", "name": "width" }, { "type": "number", "name": "height" }] }],
                                [{ "type": "atom", "value": "left" }, { "type": "list", "name": "rect", "value": [{ "type": "number", "name": "x" }, { "type": "number", "name": "y" }, { "type": "number", "name": "width" }, { "type": "number", "name": "height" }] }],
                                [{ "type": "atom", "value": "alt-left" }, { "type": "list", "name": "rect", "value": [{ "type": "number", "name": "x" }, { "type": "number", "name": "y" }, { "type": "number", "name": "width" }, { "type": "number", "name": "height" }] }],
                                [{ "type": "atom", "value": "ctrl-left" }, { "type": "list", "name": "rect", "value": [{ "type": "number", "name": "x" }, { "type": "number", "name": "y" }, { "type": "number", "name": "width" }, { "type": "number", "name": "height" }] }],
                                [{ "type": "atom", "value": "cmd-left" }, { "type": "list", "name": "rect", "value": [{ "type": "number", "name": "x" }, { "type": "number", "name": "y" }, { "type": "number", "name": "width" }, { "type": "number", "name": "height" }] }],
                                [{ "type": "atom", "value": "shift-left" }, { "type": "list", "name": "rect", "value": [{ "type": "number", "name": "x" }, { "type": "number", "name": "y" }, { "type": "number", "name": "width" }, { "type": "number", "name": "height" }] }],
                                [{ "type": "atom", "value": "right" }, { "type": "list", "name": "rect", "value": [{ "type": "number", "name": "x" }, { "type": "number", "name": "y" }, { "type": "number", "name": "width" }, { "type": "number", "name": "height" }] }],
                                [{ "type": "atom", "value": "alt-right" }, { "type": "list", "name": "rect", "value": [{ "type": "number", "name": "x" }, { "type": "number", "name": "y" }, { "type": "number", "name": "width" }, { "type": "number", "name": "height" }] }],
                                [{ "type": "atom", "value": "ctrl-right" }, { "type": "list", "name": "rect", "value": [{ "type": "number", "name": "x" }, { "type": "number", "name": "y" }, { "type": "number", "name": "width" }, { "type": "number", "name": "height" }] }],
                                [{ "type": "atom", "value": "cmd-right" }, { "type": "list", "name": "rect", "value": [{ "type": "number", "name": "x" }, { "type": "number", "name": "y" }, { "type": "number", "name": "width" }, { "type": "number", "name": "height" }] }],
                                [{ "type": "atom", "value": "shift-right" }, { "type": "list", "name": "rect", "value": [{ "type": "number", "name": "x" }, { "type": "number", "name": "y" }, { "type": "number", "name": "width" }, { "type": "number", "name": "height" }] }]
                            ]
                        },
                        {
                            "name": "scroll",
                            "description": "Predicate to match when a scroll event occurs inside the given rect. The `@scroll-delta` (`@scroll-delta-x` and `@scroll-delta-y`) variable is set to the current scroll delta. The `@pos` (`@pos-x` and `@pos-y`) variable is set to the current cursor's position.",
                            "examples": ["(scroll: (0 0 10 10)) ;1", "(on (scroll: (0 0 10 10)) @scroll-delta) ;0.1"],
                            "args": [[{ "type": "list", "name": "rect", "value": [{ "type": "number", "name": "x" }, { "type": "number", "name": "y" }, { "type": "number", "name": "width" }, { "type": "number", "name": "height" }] }]]
                        },
                        {
                            "name": "drop",
                            "description": "Predicate to match when a file drop event occurs inside the given rect. The `@drop-files` variable is set to the list of files being dropped. The `@pos` (`@pos-x` and `@pos-y`) variable is set to the current cursor's position.",
                            "examples": ["(drop: (0 0 10 10)) ;1", "(on (drop: (0 0 10 10)) @drop-files) ;(\"~/blah.txt\")"],
                            "args": [[{ "type": "list", "name": "rect", "value": [{ "type": "number", "name": "x" }, { "type": "number", "name": "y" }, { "type": "number", "name": "width" }, { "type": "number", "name": "height" }] }]]
                        },
                        {
                            "name": "key",
                            "description": "Predicate to match when a keyboard event occurs. Keys can be specified using `any` (any key), `grapheme` (printable key), `control` (control combination key), `direction` (directional keys), `delete` (delete key), `enter` (enter key), `tab` (tab key). The `@press` variable will be set to indicate whether the key is down (0) or released (1). And `@char`, `@keycode`, `@repeat`, `@flags` will also be set.",
                            "examples": ["(key: :any) ;1", "(on (key: :any) @flags) ;(:shift :alt)"],
                            "args": [
                                [{ "type": "atom", "name": "key" }],
                                [{ "type": "atom", "value": "any" }],
                                [{ "type": "atom", "value": "grapheme" }],
                                [{ "type": "atom", "value": "control" }],
                                [{ "type": "atom", "value": "direction" }],
                                [{ "type": "atom", "value": "delete" }],
                                [{ "type": "atom", "value": "enter" }],
                                [{ "type": "atom", "value": "tab" }]
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "name": "children",
            "description": "The child UI elements of the current element."
        }
    ],
    "states": [
        {
            "name": "rect",
            "description": "The position and size of the element.",
            "return": { "type": "list" },
            "args": [
                [
                    { "type": "number", "name": "x" },
                    { "type": "number", "name": "y" },
                    { "type": "number", "name": "width" },
                    { "type": "number", "name": "height" }
                ],
                [
                    {
                        "type": "list",
                        "value": [
                            { "type": "number", "name": "x" },
                            { "type": "number", "name": "y" },
                            { "type": "number", "name": "width" },
                            { "type": "number", "name": "height" }
                        ]
                    }
                ]
            ]
        },
        {
            "name": "x",
            "description": "The x-axis position of the lower left corner of the element. Do not set this, instead set the rect.",
            "return": { "type": "number" }
        },
        {
            "name": "y",
            "description": "The y-axis position of the lower left corner of the element. Do not set this, instead set the rect.",
            "return": { "type": "number" }
        },
        {
            "name": "width",
            "description": "The width the element. Do not set this, instead set the rect.",
            "return": { "type": "number" }
        },
        {
            "name": "height",
            "description": "The height the element. Do not set this, instead set the rect.",
            "return": { "type": "number" }
        },
        {
            "name": "enabled",
            "description": "Whether the element is enabled or not.",
            "return": { "type": "boolean" },
            "args": [[{ "type": "boolean" }]]
        },
        {
            "name": "rect-changed",
            "description": "Whether the rect changed since the previous render frame or not.",
            "return": { "type": "boolean" }
        }
    ]
}
